Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.

Formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])

 

Example 1:

Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]
Output: true
Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1

class Solution {
public:
    bool canThreePartsEqualSum(vector<int>& arr) {
        int totalsum=0;
        for(auto temp:arr){
            totalsum+=temp;
        }
        if(totalsum%3!=0){
            return false;
        }
        int targetsum=totalsum/3;
        int currsum=0;
        int count=0;
        for(int i=0;i<arr.size();i++){
            currsum+=arr[i];
            if(currsum==targetsum){
                count++;
                currsum=0;
            }
            if(count==2 && i<arr.size()-1){
                return true;
            }
        }
        return false;
    }
};