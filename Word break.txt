class Solution {
public:
    int t[301];
    unordered_set<string>st;
    bool solve(int indx,string&s){
        int n=s.length();
        if(indx==n){
            return true;
        }
        if(t[indx]!=-1)return t[indx];
        if(st.find(s)!=st.end()){
           return true;
        }
        for(int l=1;l<=n;l++){
            string temp=s.substr(indx,l);
            if(st.find(temp)!=st.end() && solve(indx+l,s)){
                return true;
            }
        }
        return t[indx]=false;

    }
    bool wordBreak(string s, vector<string>& wordDict) {
        int n=s.length();
        memset(t,-1,sizeof(t));
        for(auto num:wordDict)
         {
        st.insert(num);
       }  
       
       return solve(0,s);

}
};