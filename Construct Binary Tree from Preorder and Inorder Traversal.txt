class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size()!=inorder.size())return NULL;
        map<int,int>mp;
        for(int i=0;i<inorder.size();++i)
            mp[inorder[i]]=i;
            return buildTreeIn(inorder,0,inorder.size()-1,preorder,0,preorder.size()-1,mp);
 }
 TreeNode* buildTreeIn(vector<int>& inorder, int is, int ie, vector<int>& preorder, int ps, int pe,  map<int, int>& mp) {
    if (is > ie || ps > pe) return nullptr;
    TreeNode* root = new TreeNode(preorder[ps]);
    int inRoot = mp[preorder[ps]];
    int numsLeft = inRoot - is;
    root->left = buildTreeIn(inorder, is, inRoot - 1, preorder, ps+1, ps + numsLeft, mp);
    root->right = buildTreeIn(inorder, inRoot + 1, ie, preorder, ps + numsLeft+1, pe , mp);
    return root;
}
};