class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
    if(inorder.size()!=postorder.size()) return NULL;
    map<int,int> mp;
    for(int i=0; i<inorder.size(); ++i)
        mp[inorder[i]]=i;
    return buildTreeIn(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,mp);
}
TreeNode* buildTreeIn(vector<int>& inorder, int is, int ie, vector<int>& postorder, int ps, int pe, map<int,int>& mp) {
    if(is > ie || ps > pe) return NULL;
    TreeNode* root = new TreeNode(postorder[pe]);
    int inRoot = mp[postorder[pe]];
    int numsleft = inRoot - is;
    root->left = buildTreeIn(inorder, is, inRoot-1, postorder, ps, ps+numsleft-1, mp);
    root->right = buildTreeIn(inorder, inRoot+1, ie, postorder, ps+numsleft, pe-1, mp);
    return root;
}
};