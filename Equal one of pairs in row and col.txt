class Solution {
public:
    int equalPairs(vector<vector<int>>& grid) {
        int n = grid.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            bool flag = 0;
            for (int j = 0; j < n; j++) {
                bool isEqual = true;  // Check if all elements in row i are equal to elements in column j
                for (int k = 0; k < n; k++) {
                    if (grid[i][k] != grid[k][j]) {
                        isEqual = false;
                        break;
                    }
                }
                if (isEqual) {
                     cnt++;
                }
            }

        }
        return cnt;
    }
};

optimine approache of o(n^2)
class Solution {
public:
    int equalPairs(vector<vector<int>>& grid) {
        int count=0;
        int n=grid.size();
        map<vector<int>,int >mp;
        for(int row=0;row<n;row++){
            mp[grid[row]]++;
            }
            for(int col=0;col<n;col++){
                vector<int>temp;
                for(int r=0;r<n;r++){
                    temp.push_back(grid[r][col]);
                }
                count+=mp[temp];
            }
            return count;
    }
};